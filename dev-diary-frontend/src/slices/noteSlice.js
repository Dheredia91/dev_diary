// src/slices/noteSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axiosInstance from '../api/axiosInstance';

/* thunks wait for the API request to complete without blocking the main thread
   Dispatch Thunk -> Start Async Operation -> (Wait) -> Dispatch Success/Failure Action -> Reducer -> State Update */

export const fetchNotes = createAsyncThunk('notes/fetchNotes', async () => {
  const response = await axiosInstance.get('notes/');
  return response.data;
});

// create an asynchronous thunk action for adding a note
export const addNote = createAsyncThunk('notes/addNote', async (note) => {
  // make a POST request to the API to add a new note
  const response = await axiosInstance.post('notes/', note);
  return response.data; 
});

// Asynchronous thunk action for deleting a note
export const deleteNote = createAsyncThunk('notes/deleteNote', async (id) => {
  await axiosInstance.delete(`notes/${id}/`);
  return id;
});

/* createSlice combines reducers, actions, and initial state in one place */
const noteSlice = createSlice({
  name: 'notes',
  initialState: {
    notes: [],
    loading: false,
    error: null,
  },
  //  empty object here because no synchronous actions are defined
  reducers: {
    // reducer to highlight star when clicked (favoriting note)
    toggleFavorite(state, action) {
      const note = state.notes.find(note => note.id === action.payload);
      if (note) {
        note.isFavorite = !note.isFavorite;
      }
    },
  },
  // used to handle the asynchronous actions generated by createAsyncThunk
  extraReducers: (builder) => {
    builder
      .addCase(fetchNotes.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchNotes.fulfilled, (state, action) => {
        state.loading = false;
        state.notes = action.payload;
      })
      .addCase(fetchNotes.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      })
      .addCase(addNote.fulfilled, (state, action) => {
        state.notes.push(action.payload); 
      })
      .addCase(deleteNote.fulfilled, (state, action) => {
        state.notes = state.notes.filter(note => note.id !== action.payload);
      });
  },
});

export const { toggleFavorite } = noteSlice.actions;
export default noteSlice.reducer;
